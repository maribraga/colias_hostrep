---
title: "Colias biogeography"
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
editor: source
editor_options: 
  chunk_output_type: console
execute:
  warning: false
---

# Historical Biogeography of *Colias* using MultiFIG

Packages

```{r}
#| label: "packages"
#| message: FALSE

library(sf)
sf::sf_use_s2(FALSE)
library(RevGadgets)
library(patchwork)
library(ape)
library(coda)
library(here)
library(tidyverse)
```

Plot the regions and their colors.

```{r}
#| fig-width: 9
#| fig-height: 3
bioregions <- st_read(here("biogeography/data_ignore/bioregions.geojson"))

palette_fill <- c("NT" = "#FF8C01",
                  "NA" = "#DA3541",
                  "EP" = "#00A2FF",
                  "PTP" = "#F8C700",
                  "WP" = "#013459",
                  "AF" = "#EF9FBA",
                  "SA" = "white")

palette_col <- c("NT" = "#FF8C01",
                 "NA" = "#DA3541",
                 "EP" = "#00A2FF",
                 "PTP" = "#F8C700",
                 "WP" = "#013459",
                 "AF" = "#EF9FBA",
                 "SA" = "grey30")

ggplot(bioregions) +
  geom_sf(aes(fill = biome, col = biome)) +
  scale_fill_manual(values = palette_fill) +
  scale_color_manual(values = palette_col) +
  theme_bw()
```


Determine paths of output files from RevBayes MULTIFIG analysis and to save figures.

```{r}
log_file <- here("biogeography/without_zerene/server_ignore/output/altvar/run1/model.log")
log_file2 <- here("biogeography/without_zerene/server_ignore/output/altvar/run2/model.log")
geo_log_file <- here("biogeography/without_zerene/server_ignore/output/altvar/run2/geo_features.log")
tree_file <- here("biogeography/without_zerene/server_ignore/output/altvar/run2/ase.tre")
state_label_file <- here("biogeography/without_zerene/server_ignore/output/run2/state_labels.txt")
states_log_file <- here("biogeography/without_zerene/server_ignore/output/altvar/run2/states.log")
anc_states_file <- here("biogeography/without_zerene/server_ignore/output/run2/anc_states.pdf")
plot_2d_file <- here("biogeography/without_zerene/server_ignore/output/run2/2d_plots.pdf")
```


## Parameter estimates

The first things to do is to check that independent MCMC chains have converged to the same posterior distribution.

```{r}
log1 <- read.table(log_file, header = TRUE) %>% filter(Iteration > 5000)
log2 <- read.table(log_file2, header = TRUE) %>% filter(Iteration > 5000)

# take one parameter of each type to test
chain1 <- log1[,c(5,132,141,267,268,271,272,276,281,285,288,289,291)]
chain2 <- log2[,c(5,132,141,267,268,271,272,276,281,285,288,289,291)]

# Convergence test
gelman.diag(mcmc.list(as.mcmc(chain1), as.mcmc(chain2)), multivariate = FALSE)

effectiveSize(chain1)
effectiveSize(chain2)
```


Because there is one categorical and one quantitative parameter for each feature (e.g. area, distance, and altitude),
we will look at the joint probability for each pair of parameters that correspond to the effect of the same feature
over the same process (e.g. dispersal, extinction, between-region speciation and within-region speciation).

```{r}
#| fig-width: 7
#| fig-height: 9

# read logs from MCMC
trace <- readTrace(path=log_file2)

# 2d density

proc_groups <- c("_b", "_d", "_e", "_w")
phis <- array(data = paste0("phi",proc_groups), dim = c(4,1)) %>% 
  apply(1, FUN = function(x) paste0(x,"[",1:2,"]")) %>% 
  as.vector()
sigmas <- array(data = paste0("sigma",proc_groups), dim = c(4,1)) %>% 
  apply(1, FUN = function(x) paste0(x,"[",1:2,"]")) %>% 
  as.vector()

plot_2d <- function(trace, x = NULL, y = NULL){
  p <- ggplot(trace[[1]], aes(x = .data[[x]], y = .data[[y]])) +
    geom_point(shape = 21, alpha = 0.5, colour = "white", fill = "blue", size = 1) +
    geom_hline(yintercept = 0, col = "red") +
    geom_vline(xintercept = 0, col = "red") +
    theme_bw()
  p
}

list_2d <- list()
for(i in seq_along(sigmas)){
  list_2d[[i]] <- plot_2d(trace, x = phis[i], y = sigmas[i])
}

wrap_plots(list_2d, ncol=2)
```

### Effects of area size and ditance between regions.

```{r}
# calculate joint pp

trace_d <- trace[[1]] %>% 
  dplyr::select(Iteration, `phi_d[1]`, `sigma_d[1]`) %>% 
  mutate(joint_p = case_when(`phi_d[1]` >= 0 & `sigma_d[1]` >= 0 ~ "both_positive",
                             TRUE ~ "one_or_both_negative"))
trace_e <- trace[[1]] %>% 
  dplyr::select(Iteration, `phi_e[1]`, `sigma_e[1]`) %>% 
  mutate(joint_p = case_when(`phi_e[1]` >= 0 & `sigma_e[1]` >= 0 ~ "both_positive",
                             TRUE ~ "one_or_both_negative"))
trace_b <- trace[[1]] %>% 
  dplyr::select(Iteration, `phi_b[1]`, `sigma_b[1]`) %>% 
  mutate(joint_p = case_when(`phi_b[1]` >= 0 & `sigma_b[1]` >= 0 ~ "both_positive",
                             TRUE ~ "one_or_both_negative"))
trace_w <- trace[[1]] %>% 
  dplyr::select(Iteration, `phi_w[1]`, `sigma_w[1]`) %>% 
  mutate(joint_p = case_when(`phi_w[1]` >= 0 & `sigma_w[1]` >= 0 ~ "both_positive",
                             TRUE ~ "one_or_both_negative"))
```

  
Effect of distance between areas on dispersal

```{r}
trace_d %>% 
  group_by(joint_p) %>% 
  summarise(n = n()/nrow(.))
```

Effect of area size on extinction

```{r}
trace_e %>% 
  group_by(joint_p) %>% 
  summarise(n = n()/nrow(.))
```

Effect of distance on between-region speciation

```{r}
trace_b %>% 
  group_by(joint_p) %>% 
  summarise(n = n()/nrow(.))
```

Effect of area size on within-region speciation

```{r}
trace_w %>% 
  group_by(joint_p) %>% 
  summarise(n = n()/nrow(.))
```


### Effects of altitude


```{r}
# calculate joint pp

trace_d_alt <- trace[[1]] %>% 
  dplyr::select(Iteration, `phi_d[2]`, `sigma_d[2]`) %>% 
  mutate(joint_p = case_when(`phi_d[2]` >= 0 & `sigma_d[2]` >= 0 ~ "both_positive",
                             TRUE ~ "one_or_both_negative"))
trace_e_alt <- trace[[1]] %>% 
  dplyr::select(Iteration, `phi_e[2]`, `sigma_e[2]`) %>% 
  mutate(joint_p = case_when(`phi_e[2]` >= 0 & `sigma_e[2]` >= 0 ~ "both_positive",
                             TRUE ~ "one_or_both_negative"))
trace_b_alt <- trace[[1]] %>% 
  dplyr::select(Iteration, `phi_b[2]`, `sigma_b[2]`) %>% 
  mutate(joint_p = case_when(`phi_b[2]` >= 0 & `sigma_b[2]` >= 0 ~ "both_positive",
                             TRUE ~ "one_or_both_negative"))
trace_w_alt <- trace[[1]] %>% 
  dplyr::select(Iteration, `phi_w[2]`, `sigma_w[2]`) %>% 
  mutate(joint_p = case_when(`phi_w[2]` >= 0 & `sigma_w[2]` >= 0 ~ "both_positive",
                             TRUE ~ "one_or_both_negative"))
```

  
Effect of distance between areas on dispersal

```{r}
trace_d_alt %>% 
  group_by(joint_p) %>% 
  summarise(n = n()/nrow(.))
```

Effect of area size on extinction

```{r}
trace_e_alt %>% 
  group_by(joint_p) %>% 
  summarise(n = n()/nrow(.))
```

Effect of distance on between-region speciation

```{r}
trace_b_alt %>% 
  group_by(joint_p) %>% 
  summarise(n = n()/nrow(.))
```

Effect of area size on within-region speciation

```{r}
trace_w_alt %>% 
  group_by(joint_p) %>% 
  summarise(n = n()/nrow(.))
```



Posterior distribution of individual parameters (Supplementary)

```{r}
sigma_list <- list()
for(i in seq_along(sigmas)){
  sigma_list[i] <- plotTrace(trace, vars = sigmas[i])  
}
wrap_plots(sigma_list, ncol = 2)


phi_list <- list()
for(i in seq_along(phis)){
  phi_list[i] <- plotTrace(trace, vars = phis[i])  
}
wrap_plots(phi_list, ncol = 2)
```


## Ancestral state estimation

```{r}
tree <- read.tree(here("biogeography/without_zerene/data/tree_colias_geo.tre"))

original_states <- read.csv(here("biogeography/without_zerene/data/colias_geo_tbl.csv")) %>% 
  arrange(factor(species, levels = tree$tip.label))

identical(sort(tree$tip.label), sort(original_states$species))

range_matrix <- read.csv(here("biogeography/without_zerene/data/colias_geo_mtx.csv"), row.names = 1)
area_codes <- rep(1, ncol(range_matrix))
names(area_codes) <- colnames(range_matrix)
area_codes

state_labels <- read.csv(here("biogeography/without_zerene/server_ignore/output/run2/state_labels.txt"), 
                         colClasses = c("numeric","character")) %>% 
  separate_wider_position(range, widths = area_codes) %>% 
  pivot_longer(2:8, names_to = "area", values_to = "present") %>% 
  filter(present == 1) %>% 
  select(-present) %>% 
  group_by(state) %>% 
  reframe(combination = str_c(area, collapse = "+"))

labels_all <- pull(state_labels, combination) %>% as.character()
names(labels_all) <- state_labels$state
  
states <- processAncStates(tree_file, state_labels = labels_all)
```

Plot ancestral range distributions

```{r}
#| fig-width: 8.5
#| fig-height: 7.5

states_plot <- sort(unique(states@data$end_state_1))
palette <- c("#EF9FBA","#00A2FF","#AA74A1","#7CB580","#347FD5","#6E4672","#9A6F4F","#C9722C",
             "#009F52","#DA3541","#FF8C01","#F8C700","#00D164","#013459","#C38CA8","#097C65")
names(palette) <- states_plot

plotAncStatesMAP(t=states,
                 cladogenetic = TRUE,
                 tree_layout="rectangular",
                 tip_labels_offset = 0.1,
                 tip_labels_size = 3,
                 node_color_as="state",
                 node_color=palette,
                 state_transparency = 0.85,
                 node_size = c(0.7,2.5),
                 tip_states_size = 2,
                 node_size_as="state_posterior",
                 timeline = TRUE,
                 geo = FALSE)
```


```{r}
#| eval: false
#| echo: false

# Plot the results with pies at nodes
pie <- plotAncStatesPie(t = states,
                        cladogenetic = TRUE, 
                        # Pass in your named and ordered color vector
                        pie_colors = c(palette, rainbow(n=20)), 
                        # Offset the tip labels to make room for tip pies
                        tip_labels_offset = .2, 
                        tip_labels_size = 3,
                        # Change the size of node and tip pies  
                        tip_pie_size = 0.9,
                        node_pie_size = 1,
                        timeline = TRUE,
                        geo = FALSE)

pie
```

Investigating uncertainty around root state

```{r}
states_log <- read.table(states_log_file, header = TRUE) %>% 
  select(contains(c("131", "130", "129"))) %>% 
  select(contains("end"))

# Root
states_131 <- states_log %>% 
  select("end_131") %>% 
  group_by(end_131) %>% 
  summarise(freq = n()) %>% 
  rename(state = end_131) %>% 
  left_join(state_labels) %>% 
  arrange(desc(freq)) %>% 
  mutate(prob = freq/501,
         cum_prob = cumsum(prob))

states_131

# Ancestor of Norther hemisphere clade
states_130 <- states_log %>% 
  select("end_130") %>% 
  group_by(end_130) %>% 
  summarise(freq = n()) %>% 
  rename(state = end_130) %>% 
  left_join(state_labels) %>% 
  arrange(desc(freq)) %>% 
  mutate(prob = freq/501,
         cum_prob = cumsum(prob))

states_130

```

```{r}
#| echo: false
#| eval: false
write.csv(states_131, here("biogeography/without_zerene/supp_ignore/posterior_node_131.csv"), row.names = FALSE)
write.csv(states_130, here("biogeography/without_zerene/supp_ignore/posterior_node_130.csv"), row.names = FALSE)
```


## Diversification rates for tip and ancestral ranges

Speciation rates

```{r}
states_plot <- sort(unique(states@data$end_state_1))
anc_tip_states <- state_labels %>% filter(combination %in% states_plot)
lambdas <- paste0("lambda.",anc_tip_states$state,".")

lambda_log <- log2 %>% select(any_of(lambdas))

lambdas_for_plot <- lambda_log %>% pivot_longer(everything(), names_to = "range", values_to = "value") %>% 
  mutate(n_regions = case_when(range %in% lambdas[1:6] ~ 1,
                               range %in% lambdas[7:11] ~ 2,
                               range %in% lambdas[12:14] ~ 3,
                               range == lambdas[15] ~ 4,
                               range == lambdas[16] ~ 5))

ggplot(lambdas_for_plot) +
  geom_density(aes(value, group = range, fill = n_regions, col = n_regions), alpha = 0.3) +
  labs(color = "Range size",
       fill = "Range size",
       x = "Speciation rate",
       y = "Density") +
  theme_bw()
```

Extinction rates

```{r}
mus <- paste0("mu.",anc_tip_states$state,".")
mu_log <- log2 %>% select(any_of(mus))

mus_for_plot <- mu_log %>% pivot_longer(everything(), names_to = "range", values_to = "value") %>% 
  mutate(n_regions = case_when(range %in% mus[1:6] ~ 1,
                               range %in% mus[7:11] ~ 2,
                               range %in% mus[12:14] ~ 3,
                               range == mus[15] ~ 4,
                               range == mus[16] ~ 5))

ggplot(mus_for_plot) +
  geom_density(aes(value, group = range, fill = n_regions, col = n_regions), alpha = 0.3) +
  labs(color = "Range size",
       fill = "Range size",
       x = "Extinction rate",
       y = "Density") +
  theme_bw()

mus_for_plot %>%
  group_by(n_regions) %>% 
  summarise(m = mean(value))

```


